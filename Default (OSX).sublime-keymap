[
	// > Meta Comments
	// >> Personal combination
	// super+k, ctrl+shift+ ... personal chord (no collisions there)


	//
	// > General Navigation
	//

	// >> Symbol navigation
	{
		"keys": ["ctrl+shift+k"],
		"command": "goto_next_symbol", "args": {"direction": "up"}
	},
	{
		"keys": ["ctrl+shift+j"],
		"command": "goto_next_symbol", "args": {"direction": "down"}
	},


	// To cancel the default key bindings so that only the super+alt+left versions remain
	// { "keys": ["super+shift+["]},
	// { "keys": ["super+shift+]"]},

	// > Side Bar toggle
	// Overwrites the EOL macro in default
	{ "keys": ["super+k", "super+k"], "command": "toggle_side_bar" },

	//
	// > Table of Comments / Comment Marks / Goto Section
	//

	// Idea is a modification of super+r (built in goto objects)
	// super+k to go into custom zone, and super+shift+r to modify super+r
	// {
	// 	"keys": ["super+k","super+shift+r"],
	// 	"command": "table_of_comments"
	// },
	// Comment Marks command
	{
		"keys": ["super+k","super+shift+r"],
		"command": "goto_comment"
	},

	//
	// > Bookmarks (std feature)
	//

	{ "keys": ["ctrl+shift+r"], "command": "toggle_bookmark" },
	// same as standard keybinding, but overrides vintage redo
	{ "keys": ["ctrl+r"], "command": "next_bookmark" },
	// alternative for prev bookmark
	{ "keys": ["alt+ctrl+r"], "command": "prev_bookmark" },
	// { "keys": ["shift+f2"], "command": "prev_bookmark" },



	//
	// > Open Smerge
	//
	{
		"keys": ["super+k","m"],
		"command": "sublime_merge_open_repo"
	},

	//
	// > Vintage

	// >> Ensure not overwritten

	// >>> Up and Down

	{ "keys": ["ctrl+u"], "command": "vi_scroll_lines",
	"args": {"forward": false},
	"context": [{"key": "setting.command_mode"}, {"key": "setting.vintage_ctrl_keys"}]
	},

	{ "keys": ["ctrl+d"], "command": "vi_scroll_lines",
		"args": {"forward": true},
		"context": [{"key": "setting.command_mode"}, {"key": "setting.vintage_ctrl_keys"}]
	},


	// >>extension??
	//

	{ "keys": ["b"], "command": "set_motion", "args": {
		"motion": "move",
		"motion_args": {"by": "stops", "word_begin": true, "punct_begin": true, "empty_line": true, "forward": false, "extend": true },
		"clip_to_line": true },
		"context": [{"key": "setting.command_mode"}]
	},


	{ "keys": ["g","e"], "command": "set_motion", "args": {
		"motion": "move",
		"motion_args": {"by": "stops", "word_end": true, "punct_end": true, "empty_line": true, "forward": false, "extend": true },
		"inclusive": true,
		"clip_to_line": true },
		"context": [{"key": "setting.command_mode"}]
	},

	{ "keys": ["g","E"], "command": "set_motion", "args": {
		"motion": "move",
		"motion_args": {"by": "stops", "word_end": true, "empty_line": true, "separators": "", "forward": false, "extend": true },
		"inclusive": true,
		"clip_to_line": true },
		"context": [{"key": "setting.command_mode"}]
	},

	// >> Custom Command Mode commands
	// Get the most out of command mode (inspired by Astro NVim)
	// Use "space" or "g" (for "go") + (key) combo, IN COMMAND MODE ... should open up a lot
		// "space" for forward a char is hardly useful, so overload away!
	// The secret ingredient is: "context": [{"key": "setting.command_mode"}]

	// >>> Basics/Fundamentals

	// >>>> Navigation and Command Palette

	{
		"keys": [" ", "r"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"},
		"context": [{"key": "setting.command_mode"}]
	},

	{
		"keys": [" ", "R"], "command": "goto_symbol_in_project",
		"context": [{"key": "setting.command_mode"}]
	},

	{
		"keys": [" ", "c"], "command": "goto_comment",
		"context": [{"key": "setting.command_mode"}]
	},

	{
		"keys": [" ", "P"], "command": "show_overlay", "args": {"overlay": "command_palette"},
		"context": [{"key": "setting.command_mode"}]
	},

	{
		"keys": [" ", "p"], "command": "show_overlay",
		"args": {"overlay": "goto", "show_files": true},
		"context": [{"key": "setting.command_mode"}]
	},

	// >>>> Sublime Merge
	{
		"keys": [" ", "m"],
		"command": "sublime_merge_open_repo",
		"context": [{"key": "setting.command_mode"}]
	},

	// >>>> Search
	{
		"keys": [" ", "f"],
		"command": "show_panel", "args": {"panel": "replace", "reverse": false},
		"context": [{"key": "setting.command_mode"}]
	},

	{
		"keys": [" ", "F"],
		"command": "show_panel", "args": {"panel": "find_in_files"},
		"context": [{"key": "setting.command_mode"}]
	},

	// >>> Projects/Workspaces

	{
		"keys": [" ", "w"],
		"command": "project_manager", "args": {"action": "switch"},
		"context": [{"key": "setting.command_mode"}]
	},

	// >>> Navigation
	// GoTo Defintion
	{
		"keys": [" ", "d"], "command": "goto_definition",
		"context": [{"key": "setting.command_mode"}]
	},

	// >>> Go Back
	{
		"keys": [" ", ";"], "command": "jump_back",
		"context": [{"key": "setting.command_mode"}]
	},

	// >>> Goto currently open file using Tab Filter

	{
		"keys": [" ", "o"], "command": "tab_filter",
		"context": [{"key": "setting.command_mode"}]
	},
	{
		"keys": [" ", "O"], "command": "tab_filter",
		"args": {"active_group_only": true },
		"context": [{"key": "setting.command_mode"}]
	},

	// >>> Origami
	// >>>> Navigation with vim directions

	{
		"keys": [" ", "k"], "command": "travel_to_pane", "args": {"direction": "up"},
		"context": [{"key": "setting.command_mode"}]
	},
	{
		"keys": [" ", "l"], "command": "travel_to_pane", "args": {"direction": "right"},
		"context": [{"key": "setting.command_mode"}]
	},
	{
		"keys": [" ", "j"], "command": "travel_to_pane", "args": {"direction": "down"},
		"context": [{"key": "setting.command_mode"}]
	},
	{
		"keys": [" ", "h"], "command": "travel_to_pane", "args": {"direction": "left"},
		"context": [{"key": "setting.command_mode"}]
	},


	// >>>> Move tab to (new) pane

	// "K" = "shift+k"
	{
		"keys": [" ", "K"], "command": "carry_file_to_pane", "args": {"direction": "up"},
		"context": [{"key": "setting.command_mode"}]
	},
	{
		"keys": [" ", "L"], "command": "carry_file_to_pane", "args": {"direction": "right"},
		"context": [{"key": "setting.command_mode"}]
	},
	{
		"keys": [" ", "J"], "command": "carry_file_to_pane", "args": {"direction": "down"},
		"context": [{"key": "setting.command_mode"}]
	},
	{
		"keys": [" ", "H"], "command": "carry_file_to_pane", "args": {"direction": "left"},
		"context": [{"key": "setting.command_mode"}]
	},

	// >>> General Custom Commands

	// >>>> Zotero search directly from a key binding
	// couldn't get this to work ... don't know why ... something to do with the whole
	// "show_overlay" command

	// For now, just use text as the input ... relies on the user_commands file
	{
		"keys": [" ", "alt", "c"],
		"command": "show_overlay",
		"args": {
			"overlay": "command_palette",
			"text": "Zotero Search - full citation",
			// "command": "zotero_search",
			// "args": {"format": "full citation"}
		},
		"context": [{"key": "setting.command_mode"}]
	},



	// > Code Cells
	// Navigate Cells
	{
		"keys": ["g", "j"], "command": "go_to_next_cell",
		"context": [{"key": "selector", "operator": "equal", "operand": "source.python"}]
	},
	{
		"keys": ["g", "k"], "command": "go_to_next_cell",
		"args": {"direction": "up"},
		"context": [{"key": "selector", "operator": "equal", "operand": "source.python"}]
	},

	// Running code through Send Code
	{
		"keys": ["shift+enter"], "command": "send_code",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "source" }
		]
	},
	{
		"keys": ["shift+enter"], "command": "send_code",
		"context": [
			// operands attempt to allow beginning ``` of code fence to coun too (as well as plain raw code-fence)
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown meta.code-fence.definition.begin, markup.raw.code-fence, markup.raw.code-fence.markdown, markup.raw.block.fenced.markdown" }
		]
	},


	//
	// > Plain Tasks Calendar
	//

	{ "keys": ["super+k","ctrl+shift+c"], "command": "plain_tasks_calendar"},

	//
	// > Origami
	//

	// >> focus group directly
	// not really origami, but functionally related

	{"keys": ["alt+1"], "command": "focus_group", "args": {
		"group": 0
		},
	},
	{"keys": ["alt+2"], "command": "focus_group", "args": {
		"group": 1
		},
	},
	{"keys": ["alt+3"], "command": "focus_group", "args": {
		"group": 2
		},
	},
	{"keys": ["alt+4"], "command": "focus_group", "args": {
		"group": 3
		},
	},

	// >> Navigation with vim directions

	{ "keys": ["super+k", "k"], "command": "travel_to_pane", "args": {"direction": "up"} },
	{ "keys": ["super+k", "l"], "command": "travel_to_pane", "args": {"direction": "right"} },
	{ "keys": ["super+k", "j"], "command": "travel_to_pane", "args": {"direction": "down"} },
	{ "keys": ["super+k", "h"], "command": "travel_to_pane", "args": {"direction": "left"} },


	// >> Move tab to (new) pane

	// "K" = "shift+k"
	{ "keys": ["super+k", "K"], "command": "carry_file_to_pane", "args": {"direction": "up"} },
	{ "keys": ["super+k", "L"], "command": "carry_file_to_pane", "args": {"direction": "right"} },
	{ "keys": ["super+k", "J"], "command": "carry_file_to_pane", "args": {"direction": "down"} },
	{ "keys": ["super+k", "H"], "command": "carry_file_to_pane", "args": {"direction": "left"} },


	// >> Destroy current pane
	{
		"keys": ["super+k", "super+shift+j"],
		"command": "destroy_pane",
		"args": {"direction": "self"}
	},

	{ "keys": ["super+k", "super+up"], "command": "create_pane", "args": {"direction": "up", "give_focus": true} },
	{ "keys": ["super+k", "super+right"], "command": "create_pane", "args": {"direction": "right", "give_focus": true} },
	{ "keys": ["super+k", "super+down"], "command": "create_pane", "args": {"direction": "down", "give_focus": true} },
	{ "keys": ["super+k", "super+left"], "command": "create_pane", "args": {"direction": "left", "give_focus": true} },


	// >> Zooming and Pane Resizing (now disabled by default)

	{ "keys": ["super+k", "super+z"], "command": "zoom_pane", "args": {"fraction": 0.9} },
	{ "keys": ["super+k", "super+shift+z"], "command": "unzoom_pane", "args": {} },

	{ "keys": ["super+k", "super+c"], "command": "resize_pane", "args": {"orientation": "cols"} },
	{ "keys": ["super+k", "super+r"], "command": "resize_pane", "args": {"orientation": "rows"} },


	// >>> Duplicates with vintage normal mode space cords
	{ "keys": [" ", "z"],
		"command": "zoom_pane",
		"args": {"fraction": 0.95},
		"context": [{"key": "setting.command_mode"}]
	},
	{ "keys": [" ", "Z"],
		"command": "unzoom_pane",
		"args": {},
		"context": [{"key": "setting.command_mode"}]
	},



	// > Text Wrapping
	// >> Wrapping Auto ... ie to window size
	{"keys": ["super+k", "super+shift+a"], "command":"set_setting", "args":
		{
			"setting": "wrap_width",
			"value": 0
		}

	},

	// >> Wrapping Auto ... ie to default size (80)
	{"keys": ["super+k", "super+shift+d"], "command":"set_setting", "args":
		{
			"setting": "wrap_width",
			"value": 100
		}

	},

	// > Line Numbers Toggle
	{
		"keys": ["super+ctrl+shift+l"],
		"command": "toggle_setting",
		"args":
		{
			"setting": "line_numbers"
		}
	},

	// For Vintage / Vim Mode - j j exit insert mode

	// {
	//  "keys": ["j", "j"],
	//  "command": "exit_insert_mode",
	//  "context":
	//      [
	//          { "key": "setting.command_mode", "operand": false },
	//          { "key": "setting.is_widget", "operand": false }
	//      ]
	// },

	// Experiment with chaining of commands with (Very simple) plugin chain of command
	// {
	//  "keys": ["j", "j"],
	//  "command": "chain",
	//  "args": {
	//      "commands": [
	//          ["exit_insert_mode"],
	//          ["hide_auto_complete"]
	//      ]
	//  },
	//  "context":
	//      [
	//          { "key": "setting.command_mode", "operand": false },
	//          { "key": "setting.is_widget", "operand": false }
	//      ]

	// },

	// {
	//  "keys": ["k", "j"],
	//  "command": "exit_insert_mode",
	//  "context":
	//      [
	//          { "key": "setting.command_mode", "operand": false },
	//          { "key": "setting.is_widget", "operand": false }
	//      ]
	// },

	// {
	//  "keys": ["k", "j"],
	//  "command": "chain",
	//  "args": {
	//      "commands": [
	//          ["exit_insert_mode"],
	//          ["hide_auto_complete"]
	//      ]
	//  },
	//  "context":
	//      [
	//          { "key": "setting.command_mode", "operand": false },
	//          { "key": "setting.is_widget", "operand": false }
	//      ]

	// },

	// For Terminal View, maybe redundant now with Terminus (to allow scrolling through history)
	// {
	//      "keys": ["shift+pageup"],
	//      "command": "terminal_view_scroll",
	//      "args": {"forward": false},
	//      "context": [{"key": "setting.terminal_view"}]
	// },

	// {
	//      "keys": ["shift+pagedown"],
	//      "command": "terminal_view_scroll",
	//      "args": {"forward": true},
	//      "context": [{"key": "setting.terminal_view"}]
	// },

	// > Case Convert
	{
		"keys": ["super+k", "super+shift+u"],
		"command" : "title_case"
	},

	// > GoTo text
	{
		"keys": ["ctrl+;"],
		"command": "show_overlay",
		"args": {"overlay": "goto", "text": "#"}
	},

	// > Terminus
	// Open Terminus (terminal) in new file
	{
		"keys": ["super+alt+shift+t"],
		"command": "terminus_open",
		"args": {
			"config_name": "Default",
			"cwd": "${file_path:${folder}}"
		}
	},

	// >> Toggle Terminus Pane
	{
		"keys": ["alt+`"],
		"command": "toggle_terminus_panel"
	},

	// > Open terminal in current file/folder location
	// Relies on the FileManager plugin (and its settings!)
	{
		"keys": ["super+shift+t"],
		"command": "fm_open_terminal"
	},

	// > Extended Tab Switching

	// For Tab switcher ... using super+alt tab rather than ctrl+alt tab
	// { "keys": ["super+alt+tab"], "command": "extended_switcher", "args": {"list_mode": "window"} },
	// { "keys": ["super+ctrl+shift+p"], "command": "extended_switcher", "args": {"list_mode": "window"} },
	// { "keys": ["super+alt+shift+p"], "command": "extended_switcher", "args": {"list_mode": "active_group"} },

	// >> Using Tab filter instead

	{
		"keys": ["super+ctrl+shift+p"], "command": "tab_filter"
	},
	{
		"keys": ["super+alt+shift+p"], "command": "tab_filter", "args": {
			"active_group_only": true
		}
	},


	// > Markdown Editing

	// >> Goto Headings
	// ctrl+k/j - up/down any level
	// shift+ctrl+k/j - same level

	// Same level
	{ "keys": ["shift+ctrl+k"],
		"command": "mde_goto_previous_heading", "args": {"same_level": true},
		"context":
			[
				{
					"key": "setting.mde.keymap_disable.goto_previous_heading",
					"operator": "not_equal", "operand": true },
				{
					"key": "selector",
					"operator": "equal", "operand": "text.html.markdown", "match_all": true }
			]
	},
	{ "keys": ["shift+ctrl+j"], "command": "mde_goto_next_heading", "args": {"same_level": true}, "context":
		[
			{ "key": "setting.mde.keymap_disable.goto_next_heading", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
		]
	},
	// Not same level
	{ "keys": ["ctrl+k"], "command": "mde_goto_previous_heading", "args": {"same_level": false}, "context":
		[
			{ "key": "setting.mde.keymap_disable.goto_previous_heading", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
		]
	},
	{ "keys": ["ctrl+j"], "command": "mde_goto_next_heading", "args": {"same_level": false}, "context":
		[
			{ "key": "setting.mde.keymap_disable.goto_next_heading", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true }
		]
	},


	// Change Heading Level

	{
		"keys": [" ", "1"],
		"command": "mde_change_headings_level", "args": {"to": 1 },
		"context":
		[
			{"key": "setting.command_mode"},
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - meta.frontmatter - meta.disable-markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.keymap_disable.set_heading_level", "operand": false }
		]
	},
	{
		"keys": [" ", "2"],
		"command": "mde_change_headings_level", "args": {"to": 2 },
		"context":
		[
			{"key": "setting.command_mode"},
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - meta.frontmatter - meta.disable-markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.keymap_disable.set_heading_level", "operand": false }
		]
	},
	{
		"keys": [" ", "3"],
		"command": "mde_change_headings_level", "args": {"to": 3 },
		"context":
		[
			{"key": "setting.command_mode"},
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - meta.frontmatter - meta.disable-markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.keymap_disable.set_heading_level", "operand": false }
		]
	},
	{
		"keys": [" ", "4"],
		"command": "mde_change_headings_level", "args": {"to": 4 },
		"context":
		[
			{"key": "setting.command_mode"},
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - meta.frontmatter - meta.disable-markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.keymap_disable.set_heading_level", "operand": false }
		]
	},
	{
		"keys": [" ", "5"],
		"command": "mde_change_headings_level", "args": {"to": 5 },
		"context":
		[
			{"key": "setting.command_mode"},
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown - meta.frontmatter - meta.disable-markdown - markup.raw", "match_all": true },
			{ "key": "setting.mde.keymap_disable.set_heading_level", "operand": false }
		]
	},

	// >> Footnotes
	// create new footnote
	{ "keys": [" ", "6"], "command": "mde_reference_new_footnote", "context":
		[
			{"key": "setting.command_mode"},
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "setting.mde.keymap_disable.reference_new_footnote", "operator": "not_equal", "operand": true }
		]
	},

	// Can't get to work ... ?
	// jump to reference
	// { "keys": [" ", "6"], "command": "mde_reference_jump", "context":
	// 	[
	// 		{"key": "setting.command_mode"},
	// 		{ "key": "selector", "operator": "equal", "operand": "text.html.markdown meta.link.reference", "match_all": true }
	// 	]
	// },
	// { "keys": [" ", "shift+6"], "command": "mde_reference_jump", "context":
	// 	[
	// 		{"key": "setting.command_mode"},
	// 		{ "key": "selector", "operator": "equal", "operand": "text.html.markdown meta.link.reference.def.markdown entity.name.reference.link", "match_all": true }
	// 	]
	// },
	// // jump to footnote
	// { "keys": [" ", "6"], "command": "mde_magic_footnotes", "context":
	// 	[
	// 		{"key": "setting.command_mode"},
	// 		{ "key": "selector", "operator": "equal", "operand": "text.html.markdown meta.link.reference.footnote", "match_all": true }
	// 	]
	// },
	// { "keys": [" ", "shift+6"], "command": "mde_magic_footnotes", "context":
	// 	[
	// 		{"key": "setting.command_mode"},
	// 		{ "key": "selector", "operator": "equal", "operand": "text.html.markdown meta.link.reference.def.footnote entity.name.reference.link", "match_all": true }
	// 	]
	// },



	// > Bracket Highlighter
	// Copied from Example in brackethighlighter package

	// // Toggle Global Enable
	// {
	//     "keys": ["ctrl+alt+super+e"],
	//     "command": "bh_toggle_enable"
	// },

	// // Search to end of file for bracket
	{
		"keys": [" ", "b", "f"],
		"command": "bh_key",
		"context": [{"key": "setting.command_mode"}],
		"args":
		{
			"lines" : true
		}
	},

	// >> Go to left bracket
	{
		"keys": [" ", "b", "h"],
		"context": [{"key": "setting.command_mode"}],
		"command": "bh_key",
		"args":
		{
			"no_outside_adj": null,
			"no_block_mode": null,
			"lines" : true,
			"plugin":
			{
				"type": ["__all__"],
				"command": "bh_modules.bracketselect",
				"args": {"select": "left"}
			}
		}
	},

	// >> Go to right bracket
	{
		"keys": [" ", "b", "l"],
		"context": [{"key": "setting.command_mode"}],
		"command": "bh_key",
		"args":
		{
			"no_outside_adj": null,
			"no_block_mode": null,
			"lines" : true,
			"plugin":
			{
				"type": ["__all__"],
				"command": "bh_modules.bracketselect",
				"args": {"select": "right"}
			}
		}
	},

	// >> Remove brackets
	{
		"keys": [" ", "b", "d"],
		"command": "bh_remove_brackets",
		"context": [{"key": "setting.command_mode"}],
	},

	// // Toggle string escape mode for sub bracket search in strings
	// {
	//     "keys": ["ctrl+alt+super+x"],
	//     "command": "bh_toggle_string_escape_mode"
	// },

	// >> Jump to matching bracket
	{
		"keys": ["ctrl+m"],
		"command": "bh_key",
		"args": {
			"plugin": {
				"args": {"select": "right", "alternate": true},
				"command": "bh_modules.bracketselect",
				"type": ["__all__"]
			},
			"lines": true,
			"no_outside_adj": null
		}
	},

	// >> Select text between brackets
	{
		"no_outside_adj": null,
		"keys": [" ", "b", "s"],
		"context": [{"key": "setting.command_mode"}],
		"command": "bh_key",

		"args":
		{
			"lines" : true,
			"plugin":
			{
				"type": ["__all__"],
				"command": "bh_modules.bracketselect"
			}
		}
	},

	// >> Select brackets and within
	{
		"no_outside_adj": null,
		"keys": [" ", "b", "S"],
		"context": [{"key": "setting.command_mode"}],
		"command": "bh_key",

		"args":
		{
			"lines" : true,
			"plugin":
			{
				"args": {"always_include_brackets": true},
				"type": ["__all__"],
				"command": "bh_modules.bracketselect"
			}
		}
	},

	// >> Select text including brackets
	{
		"keys": [" ", "b", "S"],
		"context": [{"key": "setting.command_mode"}],
		"command": "bh_key",
		"args":
		{
			"no_outside_adj": null,
			"lines" : true,
			"plugin":
			{
				"type": ["__all__"],
				"command": "bh_modules.bracketselect",
				"args": {"always_include_brackets": true}
			}
		}
	},

	// // Select tag name of HTML/XML tag (both opening name and closing)
	// {
	//     "keys": ["ctrl+alt+super+t"],
	//     "command": "bh_key",
	//     "args":
	//     {
	//         "plugin":
	//         {
	//             "type": ["cfml", "html", "angle"],
	//             "command": "bh_modules.tagnameselect"
	//         }
	//     }
	// },
	// // Select the attribute to the right of the cursor (will wrap inside the tag)
	// {
	//     "keys": ["ctrl+alt+super+right"],
	//     "command": "bh_key",
	//     "args":
	//     {
	//         "plugin":
	//         {
	//             "type": ["cfml", "html", "angle"],
	//             "command": "bh_modules.tagattrselect",
	//             "args": {"direction": "right"}
	//         }
	//     }
	// },
	// // Select the attribute to the left of the cursor (will wrap inside the tag)
	// {
	//     "keys": ["ctrl+alt+super+left"],
	//     "command": "bh_key",
	//     "args":
	//     {
	//         "plugin":
	//         {
	//             "type": ["cfml", "html", "angle"],
	//             "command": "bh_modules.tagattrselect",
	//             "args": {"direction": "left"}
	//         }
	//     }
	// },

	// >> Convert single quote string to double quoted string and vice versa
	// Will handle escaping or unescaping quotes within the string
	{
		"keys": [" ", "b", "'"],
		"command": "bh_key",
		"context": [{"key": "setting.command_mode"}],
		"args":
		{
			"lines" : true,
			"plugin":
			{
				"type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"],
				"command": "bh_modules.swapquotes"
			}
		}
	},
	// // Fold contents between brackets
	// {
	//     "keys": ["ctrl+alt+super+["],
	//     "command": "bh_key",
	//     "args":
	//     {
	//         "plugin": {
	//             "type": ["__all__"],
	//             "command" : "bh_modules.foldbracket"
	//         }
	//     }
	// },

	// >> Swap brackets with another type
	{
		"keys": [" ", "b", "r"], // "r" = replace
		"command": "swap_brackets",
		"context": [{"key": "setting.command_mode"}],
	},

	// >> Surround selection with brackets from quick panel
	{
		"keys": [" ", "b", "w"], // "w" = wrap
		"command": "wrap_brackets",
		"context": [{"key": "setting.command_mode"}]
	},
	// // Toggle high visibility mode
	// {
	//     "keys": ["ctrl+alt+super+v"],
	//     "command": "bh_toggle_high_visibility"
	// }

	// > zettel kasten

	// >> Personal system (zekell)
	// "g" for "gnosis" (γνῶσις): knowledge
	{
		"keys": [" ", "g", "o"],
		"context": [{"key": "setting.command_mode"}, {"key": "setting.is_zekell"}],
		"command": "show_overlay",
		"args": {"overlay": "command_palette", "command": "zekell_open_note"}
	},
	{
		"keys": [" ", "g", "l"],
		"context": [{"key": "setting.command_mode"}, {"key": "setting.is_zekell"}],
		"command": "show_overlay",
		"args": {"overlay": "command_palette", "command": "zekell_insert_link"}
	},
	{
		"keys": [" ", "g", "n"],
		"context": [{"key": "setting.command_mode"}, {"key": "setting.is_zekell"}],
		"command": "show_overlay",
		"args": {"overlay": "command_palette", "command": "zekell_link_new_note"}
	},
	{
		"keys": [" ", "g", "N"],
		"context": [{"key": "setting.command_mode"}, {"key": "setting.is_zekell"}],
		"command": "show_overlay",
		"args": {"overlay": "command_palette", "command": "zekell_new_note"}
	},
	{
		"keys": [" ", "g", "g"],
		"context": [{"key": "setting.command_mode"}, {"key": "setting.is_zekell"}],
		"command": "show_overlay",
		"args": {"overlay": "command_palette", "command": "zekell_open_link"}
	},
	{
		"keys": [" ", "g", "v"],
		"context": [{"key": "setting.command_mode"}, {"key": "setting.is_zekell"}],
		"command": "show_overlay",
		"args": {"overlay": "command_palette", "command": "zekell_navigate_notes"}
	},
	{
		"keys": [" ", "g", "t"],
		"context": [{"key": "setting.command_mode"}, {"key": "setting.is_zekell"}],
		"command": "show_overlay",
		"args": {"overlay": "command_palette", "command": "zekell_insert_tag"}
	},


	// >> Parent notes
	// May be redundant as I may have added to my fork of the package
	// {
	// 	"keys": ["super+alt+enter"],
	// 	"command": "zk_show_parent_notes", "context": [ { "key": "sublime_zk", "operand": "true"}]
	// },


	// > Diff/Git nav commands
	// >> Reverting hunk
	{"keys": ["super+k","ctrl+shift+z"], "command": "revert_hunk"},
	// >> Ensuring Diff nav commands not overridden
	{ "keys": ["ctrl+."], "command": "next_modification" },
	{ "keys": ["ctrl+,"], "command": "prev_modification" },


	// > LSP

	{
		"command": "noop",
		"keys": [
			"super+alt+s"
		],
		"context": [
			{
				"key": "lsp.signature_help",
				"operator": "equal",
				"operand": 0
			}
		]
	},

	// >> Hover over help
	{
		"command": "lsp_hover",
		"keys": [" ", "i", "s"],
		// "keys": ["super+alt+d"],
		"context": [
			{
				"key": "lsp.session_with_capability",
				"operator": "equal",
				"operand": "hoverProvider"
			},
			{"key": "setting.command_mode"}
		]
	},

	// >> GoTo Commands

	// >>> Goto Definition
	{
		"command": "lsp_symbol_definition",
		"args": {
			"side_by_side": false,
			"force_group": false, // false allows already open buffer to be used
			"fallback": false
		},
		"keys": [" ", "i", "d"],
		"context": [
			{
				"key": "lsp.session_with_capability",
				"operator": "equal",
				"operand": "definitionProvider"
			},
			{
				"key": "auto_complete_visible",
				"operator": "equal",
				"operand": false
			},
			{"key": "setting.command_mode"}
		]
	},

	// >>> Goto Type Definition
	{
		"command": "lsp_symbol_type_definition",
		"args": {
			"side_by_side": false,
			"force_group": false
		},
		"keys": [" ", "i", "t"],
		"context": [
			{
				"key": "lsp.session_with_capability",
				"operator": "equal",
				"operand": "typeDefinitionProvider"
			},
			{
				"key": "auto_complete_visible",
				"operator": "equal",
				"operand": false
			},
			{"key": "setting.command_mode"}
		]
	},

	// Goto Declaration
	// {
	//     "command": "lsp_symbol_declaration",
	//     "args": {
	//         "side_by_side": false,
	//         "force_group": true
	//     },
	//     "keys": [" ", "i", "c"],
	//     "context": [
	//         {
	//             "key": "lsp.session_with_capability",
	//             "operator": "equal",
	//             "operand": "declarationProvider"
	//         },
	//         {
	//             "key": "auto_complete_visible",
	//             "operator": "equal",
	//             "operand": false
	//         }
	//     ]
	// },

	// Goto Implementation
	// {
	//     "command": "lsp_symbol_implementation",
	//     "args": {
	//         "side_by_side": false,
	//         "force_group": true
	//     },
	//     "keys": [
	//         "UNBOUND"
	//     ],
	//     "context": [
	//         {
	//             "key": "lsp.session_with_capability",
	//             "operator": "equal",
	//             "operand": "implementationProvider"
	//         },
	//         {
	//             "key": "auto_complete_visible",
	//             "operator": "equal",
	//             "operand": false
	//         }
	//     ]
	// },


	// >>> Goto Diagnostics and Errors
	{
		"command": "lsp_goto_diagnostic",
		"context": [{"key": "setting.command_mode"}],
		"args": {
			"uri": "$view_uri"
		},
		"keys": [" ", "i", "e"],
	},

	// >>> Find References
	{
		"command": "lsp_symbol_references",
		"args": {
			"side_by_side": false,
			"fallback": false
		},
		"keys": [" ", "i", "r"],
		"context": [
			{
				"key": "lsp.session_with_capability",
				"operator": "equal",
				"operand": "referencesProvider"
			},
			{"key": "setting.command_mode"}
		]
	},


	// > Open URL

	// Replacement for ctrl+u, as collides with vintage ctrl+u
	{ "keys": ["ctrl+shift+u"], "command": "open_url", "args": { "show_menu": false } },


	// > Send Code
	// might conflict with replace all in find panel??

	{
		"keys": ["ctrl+shift+enter"], "command": "send_code",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "source" }
		]
	},
	{
		"keys": ["ctrl+shift+enter"], "command": "send_code",
		"context": [
			// operands attempt to allow beginning ``` of code fence to coun too (as well as plain raw code-fence)
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown meta.code-fence.definition.begin, markup.raw.code-fence, markup.raw.code-fence.markdown, markup.raw.block.fenced.markdown" }
		]
	},

	// >> Re-instate original keybinding for super+enter
	// Default key binding for SendCode ... undesirable ... want original back
	// above keybindings now run the main command
	{
		"keys": ["super+enter"], "command": "run_macro_file",
		"args": {"file": "res://Packages/Default/Add Line.sublime-macro"}, "context":
		[
			{ "key": "overlay_has_focus", "operator": "equal", "operand": false },
		],
	 },

	// > Python REPL

	// Send a newline to the Terminus Python REPL, if it's open
	// { "keys": ["shift+ctrl+enter"], "command": "terminus_send_string",
	//   "args": {"string": "\n", "tag": "python-repl"},
	//   "context": [
	//       { "key": "terminus_tag.exists", "operand": "python-repl" },
	//       { "key": "selector", "operator": "equal", "operand": "source.python" },
	//   ],
	// },
	{ "keys": ["shift+ctrl+enter"], "command": "send_selection_to_terminus",
	  "args": {
		  "whole_buffer":"True", "tag": "python-repl"
	  },
	  "context": [
		  { "key": "terminus_tag.exists", "operand": "python-repl" },
		  { "key": "selector", "operator": "equal", "operand": "source.python" },
	  ],
	},


// Open a Python REPL using a Terminus buid if it's not already running.
// Can probably shift the build to a pure command so that project settings can be used
// for conda environment and REPL environment
	// { "keys": ["shift+enter"], "command": "build",
	//   "args": {
	//       "build_system": "Packages/User/PythonREPL.sublime-build",
	//       "variant": "",
	//   },
	//   "context": [
	//       { "key": "terminus_tag.notexists", "operand": "python-repl" },
	//       { "key": "selector", "operator": "equal", "operand": "source.python" },
	//   ],
	// },


	// >> Open REPL
	// Open REPL with custom command and call to terminus

	// using sendcode now ... use this for "run cell" or send cell code to terminal
	// { "keys": ["shift+enter"], "command": "open_python_repl_view",
	//   "context": [
	// 	  { "key": "terminus_tag.notexists", "operand": "python-repl" },
	// 	  { "key": "selector", "operator": "equal", "operand": "source.python" },
	//   ],
	// },

	// >> Send selection
	// Send the current selection or file content to the Terminus Python REPL,
	// if it exists.
	//
	// You could also augment this by having different keys depending on if
	// there is selected text or not, or constrain the number of selections,
	// etc.
	{ "keys": ["ctrl+enter"], "command": "send_selection_to_terminus",
	  "args": {"tag": "python-repl"},
	  "context": [
		  { "key": "terminus_tag.exists", "operand": "python-repl" },
		  { "key": "selector", "operator": "equal", "operand": "source.python" },
	  ],
	},

	// >> Send cell
	// Send code from within the cell
	{ "keys": ["shift+enter"], "command": "send_cell_to_terminus",
	  "args": {"tag": "python-repl"},
	  "context": [
		  { "key": "terminus_tag.exists", "operand": "python-repl" },
		  { "key": "selector", "operator": "equal", "operand": "source.python" },
	  ],
	},

	// >> Add cell markers

	{
		"keys": ["alt+enter"], "command": "add_cell_markers",
		"context": [
		  // { "key": "terminus_tag.exists", "operand": "python-repl" },
		  { "key": "selector", "operator": "equal", "operand": "source.python" },
		]

	},

	// >> Nav cells
	{
		"keys": ["ctrl+j"], "command": "go_to_next_cell",
		"context": [{"key": "selector", "operator": "equal", "operand": "source.python"}]
	},
	{
		"keys": ["ctrl+k"], "command": "go_to_next_cell",
		"args": {"direction": "up"},
		"context": [{"key": "selector", "operator": "equal", "operand": "source.python"}]
	},

	// >> Dash Doc
	{ "keys": ["ctrl+h"], "command": "dash_doc"},

	// > Markdown Strikethrough (custom)
	// limited to markdown only
	// It's like a "Done!" (thus the "d")
	{
		"keys": ["ctrl+shift+d"], "command": "md_strike_point",
		"context": [{"key": "selector", "operator": "equal", "operand": "text.html.markdown"}]

	},

	// > Toggle Tabs

	{
		"keys": ["super+k","ctrl+shift+t"], "command": "toggle_tabs"
	},

]
